import re
import uuid
from datetime import date
from decimal import Decimal

from django.conf import settings
from django.contrib.auth.models import AbstractUser, Group, Permission
from django.contrib.sites.models import Site
from django.core.exceptions import ValidationError
from django.core.mail import EmailMultiAlternatives
from django.core.validators import RegexValidator, MinValueValidator, MaxValueValidator
from django.db import models, transaction
from django.db.models import Q
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.urls import reverse
from django.utils import timezone
from django.utils.text import slugify
from django.utils.translation import gettext_lazy as _
from django.db.utils import IntegrityError

from cloudinary.models import CloudinaryField

# utils de telefone do pr√≥prio app
from .utils.phones import normalizar_e164_br, validar_e164_br

# tenta importar o cliente do WhatsApp (sem quebrar em dev)
try:
    from integracoes.whatsapp import (
        send_text,            # texto livre (janela 24h)
        send_template,        # envio cru de template (fallback)
        enviar_inscricao_recebida,
        enviar_selecionado_info,
        enviar_pagamento_recebido,
    )
except Exception:
    send_text = send_template = enviar_inscricao_recebida = enviar_selecionado_info = enviar_pagamento_recebido = None


# ---------------------------------------------------------------------
# Par√≥quia
# ---------------------------------------------------------------------
class Paroquia(models.Model):
    STATUS_CHOICES = [
        ('ativa', 'Ativa'),
        ('inativa', 'Inativa'),
    ]

    nome = models.CharField(max_length=255)  # √∫nico obrigat√≥rio

    cidade = models.CharField(max_length=100, blank=True)
    estado = models.CharField(max_length=2, blank=True)
    responsavel = models.CharField(max_length=255, blank=True)
    email = models.EmailField(blank=True)

    telefone = models.CharField(
        max_length=20,
        blank=True,  # <- opcional
        help_text="Telefone no formato E.164 BR: +55DDDN√öMERO (ex.: +5563920013103)",
        validators=[
            RegexValidator(
                regex=r'^\+55\d{10,11}$',
                message="Formato inv√°lido. Use +55 seguido de 10 ou 11 d√≠gitos (ex.: +5563920013103).",
            )
        ],
    )

    status = models.CharField(
        max_length=10,
        choices=STATUS_CHOICES,
        default='ativa',
        blank=True,   # opcional no formul√°rio; o default cobre no banco
    )
    logo = CloudinaryField(null=True, blank=True, verbose_name="Logo da Par√≥quia")

    def __str__(self):
        return self.nome

    def clean(self):
        """Normaliza o telefone digitado para E.164; se falhar, erro amig√°vel."""
        super().clean()
        if self.telefone:
            norm = normalizar_e164_br(self.telefone)
            if not norm or not validar_e164_br(norm):
                raise ValidationError({'telefone': "Informe um telefone BR v√°lido. Ex.: +5563920013103"})
            self.telefone = norm

    def save(self, *args, **kwargs):
        # garante normaliza√ß√£o tamb√©m em saves diretos
        if self.telefone:
            norm = normalizar_e164_br(self.telefone)
            if norm:
                self.telefone = norm
        super().save(*args, **kwargs)


class PastoralMovimento(models.Model):
    nome = models.CharField(max_length=200)

    def __str__(self):
        return self.nome


# ---------------------------------------------------------------------
# Participante
# ---------------------------------------------------------------------
class Participante(models.Model):
    nome      = models.CharField(max_length=150)
    cpf       = models.CharField(max_length=14, unique=True)
    telefone  = models.CharField(max_length=15)
    email     = models.EmailField()
    foto      = CloudinaryField(null=True, blank=True, verbose_name="Foto do Participante")

    CEP       = models.CharField("CEP", max_length=10)
    endereco  = models.CharField("Endere√ßo", max_length=255)
    numero    = models.CharField("N√∫mero", max_length=10)
    bairro    = models.CharField("Bairro", max_length=100)
    cidade    = models.CharField("Cidade", max_length=100)
    estado    = models.CharField(
        "Estado", max_length=2,
        choices=[('AC','AC'),('AL','AL'),('AP','AP'),('AM','AM'),('BA','BA'),
                 ('CE','CE'),('DF','DF'),('ES','ES'),('GO','GO'),('MA','MA'),
                 ('MT','MT'),('MS','MS'),('MG','MG'),('PA','PA'),('PB','PB'),
                 ('PR','PR'),('PE','PE'),('PI','PI'),('RJ','RJ'),('RN','RN'),
                 ('RS','RS'),('RO','RO'),('RR','RR'),('SC','SC'),('SP','SP'),
                 ('SE','SE'),('TO','TO')]
    )

    # Token √∫nico para QR Code
    qr_token = models.UUIDField(
        default=uuid.uuid4,
        editable=False,
        unique=True,
        verbose_name="Token para QR Code"
    )

    def save(self, *args, **kwargs):
        if not self.qr_token:
            self.qr_token = uuid.uuid4()
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.nome} ({self.cidade} - {self.estado})"


# ---------------------------------------------------------------------
# Evento
# ---------------------------------------------------------------------
class EventoAcampamento(models.Model):
    TIPO_ACAMPAMENTO = [
        ('senior',  'Acampamento S√™nior'),
        ('juvenil', 'Acampamento Juvenil'),
        ('mirim',   'Acampamento Mirim'),
        ('servos',  'Acampamento de Servos'),
        # ‚Äî‚Äî‚Äî NOVOS TIPOS ‚Äî‚Äî‚Äî
        ('casais',  'Encontro de Casais'),
        ('evento',  'Evento'),
        ('retiro',  'Retiro'),
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    nome = models.CharField(max_length=255)
    tipo = models.CharField(max_length=20, choices=TIPO_ACAMPAMENTO)
    data_inicio = models.DateField()
    data_fim = models.DateField()
    inicio_inscricoes = models.DateField()
    fim_inscricoes = models.DateField()
    valor_inscricao = models.DecimalField(
        max_digits=8,
        decimal_places=2,
        default=0.00,
        verbose_name="Valor da Inscri√ß√£o"
    )
    slug = models.SlugField(unique=True, blank=True)
    paroquia = models.ForeignKey("Paroquia", on_delete=models.CASCADE, related_name="eventos")

    banner = CloudinaryField(null=True, blank=True, verbose_name="Banner do Evento")

    # üîπ Novo campo: flag no PRINCIPAL que libera inscri√ß√µes do Servos
    permitir_inscricao_servos = models.BooleanField(
        default=False,
        help_text="Se marcado, o evento de Servos vinculado pode receber inscri√ß√µes."
    )

    # v√≠nculo de evento para Servos
    evento_relacionado = models.ForeignKey(
        "self",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="eventos_servos",
        help_text="Se este for um evento de Servos, vincule ao evento principal em que ir√£o servir."
    )

    def save(self, *args, **kwargs):
        # slug √∫nico e resiliente
        if not self.slug:
            base = slugify(f"{self.tipo}-{self.nome}-{self.data_inicio}")
            slug = base
            i = 1
            while EventoAcampamento.objects.filter(slug=slug).exclude(pk=self.pk).exists():
                i += 1
                slug = f"{base}-{i}"
            self.slug = slug
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.nome} ({self.get_tipo_display()})"

    @property
    def is_servos(self) -> bool:
        return (self.tipo or "").lower() == "servos"

    @property
    def principal(self):
        """Se for servos, retorna o evento principal; caso contr√°rio, None."""
        return self.evento_relacionado if self.is_servos else None

    @property
    def servos_evento(self):
        """Retorna o √∫nico evento de servos vinculado (se existir)."""
        return self.eventos_servos.filter(tipo="servos").first()

    @property
    def link_inscricao(self):
        return reverse('inscricoes:inscricao_inicial', kwargs={'slug': self.slug})

    @property
    def status_inscricao(self):
        hoje = date.today()
        if self.inicio_inscricoes <= hoje <= self.fim_inscricoes:
            return "Inscri√ß√µes Abertas"
        elif hoje < self.inicio_inscricoes:
            return "Inscri√ß√µes ainda n√£o iniciadas"
        return "Inscri√ß√µes Encerradas"

    class Meta:
        constraints = [
            # Garante no m√°ximo UM evento de servos por principal
            models.UniqueConstraint(
                fields=["evento_relacionado"],
                condition=Q(tipo="servos"),
                name="uniq_servos_por_evento_principal",
            ),
        ]


@receiver(post_save, sender=EventoAcampamento)
def criar_evento_servos_automatico(sender, instance: "EventoAcampamento", created, **kwargs):
    """
    Sempre que um evento PRINCIPAL for criado (qualquer tipo != 'servos'),
    cria automaticamente um evento de 'servos' vinculado, com mesmas datas e par√≥quia.
    N√£o habilita inscri√ß√µes por padr√£o ‚Äî depende de 'permitir_inscricao_servos' no principal.
    """
    if not created:
        return
    if (instance.tipo or "").lower() == "servos":
        return

    try:
        # Evita duplicar caso algu√©m j√° tenha criado manualmente
        ja_existe = EventoAcampamento.objects.filter(
            tipo="servos",
            evento_relacionado=instance
        ).exists()
        if ja_existe:
            return

        EventoAcampamento.objects.create(
            nome=f"Servos ‚Äì {instance.nome}",
            tipo="servos",
            data_inicio=instance.data_inicio,
            data_fim=instance.data_fim,
            inicio_inscricoes=instance.inicio_inscricoes,  # ajuste se quiser abrir antes
            fim_inscricoes=instance.fim_inscricoes,
            valor_inscricao=Decimal("0.00"),
            paroquia=instance.paroquia,
            evento_relacionado=instance,
            banner=getattr(instance, "banner", None),
        )
    except IntegrityError:
        # Em caso de corrida, ignore ‚Äî a constraint j√° garante unicidade
        pass
    except Exception:
        # N√£o quebra a cria√ß√£o do principal
        pass


# ---------------------------------------------------------------------
# Inscri√ß√£o
# ---------------------------------------------------------------------
class Inscricao(models.Model):
    participante = models.ForeignKey('Participante', on_delete=models.CASCADE)
    evento       = models.ForeignKey('EventoAcampamento', on_delete=models.CASCADE)
    paroquia     = models.ForeignKey('Paroquia', on_delete=models.CASCADE, related_name='inscricoes')
    data_inscricao = models.DateTimeField(auto_now_add=True)

    foi_selecionado       = models.BooleanField(default=False)
    pagamento_confirmado  = models.BooleanField(default=False)
    inscricao_concluida   = models.BooleanField(default=False)
    inscricao_enviada     = models.BooleanField(default=False)

    # NOVO: J√° √© campista?
    ja_e_campista = models.BooleanField(
        default=False,
        verbose_name="J√° √© campista?"
    )
    tema_acampamento = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name="Se sim, qual tema do acampamento que participou?"
    )

    # CPF do c√¥njuge (opcional; usado para localizar e parear depois)
    cpf_conjuge = models.CharField(
        max_length=14, blank=True, null=True,
        help_text="CPF do c√¥njuge (com ou sem m√°scara)"
    )

    # Pareamento (bidirecional) com outra inscri√ß√£o (ex.: casal)
    inscricao_pareada = models.OneToOneField(
        'self',
        null=True, blank=True,
        on_delete=models.SET_NULL,
        related_name='pareada_por',
        help_text="Outra inscri√ß√£o (c√¥njuge) vinculada"
    )

    # Respons√°vel 1
    responsavel_1_nome            = models.CharField(max_length=255, blank=True, null=True)
    responsavel_1_telefone        = models.CharField(max_length=20,  blank=True, null=True)
    responsavel_1_grau_parentesco = models.CharField(max_length=50,  blank=True, null=True)
    responsavel_1_ja_e_campista   = models.BooleanField(default=False)

    # Respons√°vel 2
    responsavel_2_nome            = models.CharField(max_length=255, blank=True, null=True)
    responsavel_2_telefone        = models.CharField(max_length=20,  blank=True, null=True)
    responsavel_2_grau_parentesco = models.CharField(max_length=50,  blank=True, null=True)
    responsavel_2_ja_e_campista   = models.BooleanField(default=False)

    # Contato de Emerg√™ncia
    contato_emergencia_nome            = models.CharField(max_length=255, blank=True, null=True)
    contato_emergencia_telefone        = models.CharField(max_length=20,  blank=True, null=True)
    contato_emergencia_grau_parentesco = models.CharField(max_length=50,  blank=True, null=True)
    contato_emergencia_ja_e_campista   = models.BooleanField(default=False)

    class Meta:
        unique_together = ('participante', 'evento')

    def __str__(self):
        return f"{self.participante.nome} ‚Äì {self.evento.nome} ‚Äì {self.paroquia.nome}"

    # ---------------- Helpers ----------------
    @property
    def inscricao_url(self) -> str:
        relative = reverse('inscricoes:ver_inscricao', args=[self.id])
        base = getattr(settings, "SITE_DOMAIN", "").rstrip("/")
        if not base:
            try:
                current = Site.objects.get_current()
                base = f"https://{current.domain}".rstrip("/")
            except Exception:
                base = ""
        return f"{base}{relative}" if base else relative

    @property
    def portal_participante_url(self) -> str:
        try:
            relative = reverse('inscricoes:minhas_inscricoes_por_cpf')
        except Exception:
            relative = reverse('inscricoes:portal_participante')
        base = getattr(settings, "SITE_DOMAIN", "").rstrip("/")
        if not base:
            try:
                current = Site.objects.get_current()
                base = f"https://{current.domain}".rstrip("/")
            except Exception:
                base = ""
        return f"{base}{relative}" if base else relative

    def _site_name(self) -> str:
        site_name = getattr(settings, "SITE_NAME", "") or (getattr(self.paroquia, "nome", "") or "")
        if not site_name:
            try:
                site_name = Site.objects.get_current().domain
            except Exception:
                site_name = "Nossa Equipe"
        return site_name

    def _evento_data_local(self):
        ev = self.evento
        data = getattr(ev, "data_evento", None) or getattr(ev, "data_inicio", None)
        if data:
            try:
                data_str = timezone.localtime(data).strftime("%d/%m/%Y")
            except Exception:
                try:
                    data_str = data.strftime("%d/%m/%Y")
                except Exception:
                    data_str = str(data)
        else:
            data_str = "A definir"
        local = getattr(ev, "local", None) or getattr(ev, "local_evento", None) or "Local a definir"
        return data_str, local

    # ---------------- BaseInscricao por tipo ----------------
    def _get_baseinscricao_model(self):
        tipo = (self.evento.tipo or "").strip().lower()
        mapping = {
            'senior':  InscricaoSenior,
            'juvenil': InscricaoJuvenil,
            'mirim':   InscricaoMirim,
            'servos':  InscricaoServos,
            'casais':  InscricaoCasais,   # NOVO
            'evento':  InscricaoEvento,   # NOVO
            'retiro':  InscricaoRetiro,   # NOVO
        }
        return mapping.get(tipo)

    def ensure_base_instance(self):
        Model = self._get_baseinscricao_model()
        if not Model:
            return None
        obj, _created = Model.objects.get_or_create(
            inscricao=self,
            defaults={'paroquia': self.paroquia}
        )
        return obj

    # ---------------- Pareamento ----------------
    @property
    def par(self):
        """Retorna a inscri√ß√£o pareada (independente do lado)."""
        return self.inscricao_pareada or getattr(self, 'pareada_por', None)

    def clean(self):
        super().clean()

        # Regra de pareamento
        if self.inscricao_pareada:
            if self.inscricao_pareada_id == self.id:
                raise ValidationError({'inscricao_pareada': "N√£o √© poss√≠vel parear com a pr√≥pria inscri√ß√£o."})
            if self.inscricao_pareada.evento_id != self.evento_id:
                raise ValidationError({'inscricao_pareada': "A inscri√ß√£o pareada deve ser do mesmo evento."})

        # Regra do campista
        if self.ja_e_campista and not self.tema_acampamento:
            raise ValidationError({'tema_acampamento': "Informe o tema do acampamento que participou."})

        # üîí Regra: evento de Servos s√≥ aceita inscri√ß√£o se o principal permitir
        if (self.evento.tipo or "").lower() == "servos":
            principal = self.evento.evento_relacionado
            if not principal:
                raise ValidationError({"evento": "Evento de Servos sem v√≠nculo com evento principal."})
            if not principal.permitir_inscricao_servos:
                raise ValidationError("Inscri√ß√µes de Servos est√£o desabilitadas para este evento.")

    def set_pareada(self, outra: "Inscricao"):
        """Define o v√≠nculo e espelha nas duas pontas."""
        if not outra:
            self.desparear()
            return
        if outra == self:
            raise ValidationError("N√£o pode parear consigo mesmo.")
        if outra.evento_id != self.evento_id:
            raise ValidationError("A inscri√ß√£o pareada deve ser do mesmo evento.")

        with transaction.atomic():
            self.inscricao_pareada = outra
            self.save(update_fields=['inscricao_pareada'])
            if outra.par != self:
                outra.inscricao_pareada = self
                outra.save(update_fields=['inscricao_pareada'])

            # Propaga sele√ß√£o se evento de casais
            if (self.evento.tipo or '').lower() == 'casais':
                if self.foi_selecionado and not outra.foi_selecionado:
                    outra.foi_selecionado = True
                    outra.save(update_fields=['foi_selecionado'])
                elif outra.foi_selecionado and not self.foi_selecionado:
                    self.foi_selecionado = True
                    self.save(update_fields=['foi_selecionado'])

    def desparear(self):
        """Remove o pareamento nas duas pontas."""
        if self.par:
            outra = self.par
            with transaction.atomic():
                self.inscricao_pareada = None
                self.save(update_fields=['inscricao_pareada'])
                if outra.par == self:
                    outra.inscricao_pareada = None
                    outra.save(update_fields=['inscricao_pareada'])

    # --- util para CPF do c√¥njuge ---
    def _digits(self, s: str | None) -> str:
        return re.sub(r'\D', '', s or '')

    def _fmt(self, digits: str) -> str:
        return f"{digits[0:3]}.{digits[3:6]}.{digits[6:9]}-{digits[9:11]}" if len(digits) == 11 else digits

    def tentar_vincular_conjuge(self) -> bool:
        """
        Se `cpf_conjuge` estiver preenchido, tenta localizar a inscri√ß√£o do mesmo evento
        do participante com esse CPF e vincula (bidirecional). Propaga sele√ß√£o se casais.
        """
        if self.par is not None:
            return False

        d = self._digits(self.cpf_conjuge)
        if len(d) != 11:
            return False

        variantes = {d, self._fmt(d)}

        # 1) Participante do c√¥njuge
        try:
            conjuge_part = Participante.objects.get(cpf__in=variantes)
        except Participante.DoesNotExist:
            return False

        # 2) Inscri√ß√£o do mesmo evento
        alvo = Inscricao.objects.filter(
            evento=self.evento,
            participante=conjuge_part,
        ).first()
        if not alvo or alvo.par is not None:
            return False

        # 3) Pareia
        self.set_pareada(alvo)
        return True

    # =============== Pagamento espelhado para casal ===============
    def _propagar_pagamento_para_par(self, confirmado: bool):
        """
        Se evento for CASAIS, sincroniza o status de pagamento com a inscri√ß√£o pareada
        sem disparar loops/duplicar notifica√ß√µes.
        """
        if (self.evento.tipo or '').lower() != 'casais':
            return
        par = self.par
        if not par:
            return

        # evita update se j√° est√° consistente
        if par.pagamento_confirmado == confirmado and par.inscricao_concluida == confirmado:
            return

        with transaction.atomic():
            type(self).objects.filter(pk=par.pk).update(
                pagamento_confirmado=confirmado,
                inscricao_concluida=confirmado,
            )

    # ---------------- E-mails (apenas) ----------------
    def enviar_email_recebida(self):
        """Inscri√ß√£o recebida (estilo cat√≥lico/campista)."""
        if not getattr(self.participante, "email", None):
            return

        nome_app = self._site_name()
        data_envio = timezone.localtime(self.data_inscricao).strftime("%d/%m/%Y %H:%M")
        data_evento, _local_evento = self._evento_data_local()

        assunto = f"üôè Inscri√ß√£o recebida ‚Äî {self.evento.nome} ({data_evento})"

        texto = (
            f"Ol√° {self.participante.nome}!\n\n"
            f"Recebemos sua inscri√ß√£o para o {self.evento.nome}.\n"
            "Nossa equipe vai analisar e avisaremos os(as) selecionados(as) por e-mail.\n\n"
            "Resumo do envio:\n"
            f"üìÖ Data do envio: {data_envio}\n"
            f"üìç Evento: {self.evento.nome}\n"
            f"üóì Data do evento: {data_evento}\n\n"
            "Permane√ßamos unidos em ora√ß√£o. Deus aben√ßoe!\n"
            f"Equipe {nome_app}\n"
        )

        html = f"""
        <html><body style="margin:0;font-family:Arial,Helvetica,sans-serif;background:#f7f7f9;color:#222;">
          <div style="max-width:640px;margin:0 auto;">
            <div style="background:#1b2a4a;color:#fff;padding:18px 22px;border-radius:12px 12px 0 0;">
              <h1 style="margin:0;font-size:22px;">Inscri√ß√£o recebida</h1>
              <p style="margin:6px 0 0;font-size:14px;opacity:.9;">{self.evento.nome}</p>
            </div>
            <div style="background:#fff;padding:22px;border:1px solid #e9e9f1;border-top:none;border-radius:0 0 12px 12px;">
              <p>Ol√°, <strong>{self.participante.nome}</strong>! ‚ú®</p>
              <p>Recebemos sua <strong>inscri√ß√£o</strong> para o <strong>{self.evento.nome}</strong>.
                 Em breve avisaremos os(as) selecionados(as).</p>
              <div style="background:#f3f6ff;border-left:4px solid #3c66ff;padding:12px 14px;border-radius:8px;margin:16px 0;">
                <p style="margin:0;"><strong>Resumo do envio</strong></p>
                <p style="margin:6px 0 0;">üìÖ {data_envio}</p>
              </div>
              <p style="margin:14px 0;">
                Voc√™ pode revisar sua inscri√ß√£o aqui:
                <a href="{self.inscricao_url}" style="color:#1b2a4a;font-weight:bold;">ver minha inscri√ß√£o</a>.
              </p>
              <hr style="border:none;border-top:1px solid #eee;margin:18px 0;">
              <p style="font-size:13px;opacity:.8;">
                ‚ÄúCora√ß√µes ao alto!‚Äù ‚Äî Que o Senhor conduza nossos passos.<br>
                <strong>{nome_app}</strong>
              </p>
            </div>
          </div>
        </body></html>
        """

        msg = EmailMultiAlternatives(assunto, texto, settings.DEFAULT_FROM_EMAIL, [self.participante.email])
        msg.attach_alternative(html, "text/html")
        try:
            msg.send()
        except Exception:
            pass

    def enviar_email_pagamento_confirmado(self):
        """Pagamento confirmado (estilo cat√≥lico/campista)."""
        if not getattr(self.participante, "email", None):
            return

        data_evento, local_evento = self._evento_data_local()
        assunto = f"‚úùÔ∏è Pagamento confirmado ‚Äî {self.evento.nome}"

        texto = (
            f"Ol√° {self.participante.nome}!\n\n"
            f"Recebemos a confirma√ß√£o do seu pagamento para o {self.evento.nome}.\n"
            "Sua vaga est√° garantida. Obrigado por colaborar com a miss√£o!\n\n"
            "Resumo:\n"
            f"üë§ Participante: {self.participante.nome}\n"
            f"üìÖ Data do evento: {data_evento}\n"
            f"üìç Local: {local_evento}\n\n"
            "Prepare o cora√ß√£o, leve sua B√≠blia e itens pessoais.\n"
            f"Acompanhe detalhes no Portal do Participante: {self.portal_participante_url}\n\n"
            "At√© breve!\n"
            f"Equipe {self._site_name()}\n"
        )

        html = f"""
        <html><body style="margin:0;font-family:Arial,Helvetica,sans-serif;background:#fbfaff;color:#222;">
          <div style="max-width:640px;margin:0 auto;">
            <div style="background:#265d3a;color:#fff;padding:18px 22px;border-radius:12px 12px 0 0;">
              <h1 style="margin:0;font-size:22px;">Pagamento confirmado</h1>
              <p style="margin:6px 0 0;font-size:14px;opacity:.9;">{self.evento.nome}</p>
            </div>
            <div style="background:#fff;padding:22px;border:1px solid #e9efe9;border-top:none;border-radius:0 0 12px 12px;">
              <p>Ol√°, <strong>{self.participante.nome}</strong>! üíö</p>
              <p>Recebemos seu pagamento. Sua <strong>vaga est√° garantida</strong>!</p>
              <div style="background:#eef9f1;border-left:4px solid #46a86d;padding:12px 14px;border-radius:8px;margin:16px 0;">
                <p style="margin:0;"><strong>Resumo</strong></p>
                <p style="margin:6px 0 0;">üìÖ {data_evento} ‚Ä¢ üìç {local_evento}</p>
              </div>
              <p>Veja documentos e orienta√ß√µes no Portal do Participante:</p>
              <p style="margin:14px 0;">
                <a href="{self.portal_participante_url}" style="background:#265d3a;color:#fff;padding:10px 16px;border-radius:8px;text-decoration:none;display:inline-block;">Abrir Portal</a>
              </p>
              <hr style="border:none;border-top:1px solid #e5eee7;margin:18px 0;">
              <p style="font-size:13px;opacity:.8;">‚ÄúFazei tudo o que Ele vos disser‚Äù (Jo 2,5).</p>
            </div>
          </div>
        </body></html>
        """

        msg = EmailMultiAlternatives(assunto, texto, settings.DEFAULT_FROM_EMAIL, [self.participante.email])
        msg.attach_alternative(html, "text/html")
        try:
            msg.send()
        except Exception:
            pass

    def enviar_email_selecao(self):
        """Selecionado(a) (estilo cat√≥lico/campista)."""
        if not getattr(self.participante, "email", None):
            return

        nome_app = self._site_name()
        data_evento, local_evento = self._evento_data_local()

        assunto = f"üéâ Voc√™ foi selecionado(a)! ‚Äî {self.evento.nome}"

        texto = (
            f"Querido(a) {self.participante.nome},\n\n"
            "Com grande alegria, comunicamos que voc√™ foi selecionado(a) para participar deste encontro!\n\n"
            "Informa√ß√µes:\n"
            f"üóì Data: {data_evento}\n"
            f"üìç Local: {local_evento}\n\n"
            f"Confirme sua presen√ßa e acompanhe orienta√ß√µes no Portal: {self.portal_participante_url}\n\n"
            "‚ÄúVinde a mim, v√≥s todos que estais cansados‚Ä¶‚Äù (Mt 11,28).\n"
            f"Conte com nossas ora√ß√µes.\nEquipe {nome_app}\n"
        )

        html = f"""
        <html><body style="margin:0;font-family:Arial,Helvetica,sans-serif;background:#fffdfa;color:#222;">
          <div style="max-width:640px;margin:0 auto;">
            <div style="background:#7a3e1d;color:#fff;padding:18px 22px;border-radius:12px 12px 0 0;background-image:linear-gradient(135deg,#7a3e1d,#a15a31);">
              <h1 style="margin:0;font-size:22px;">Voc√™ foi selecionado(a)!</h1>
              <p style="margin:6px 0 0;font-size:14px;opacity:.9;">{self.evento.nome}</p>
            </div>
            <div style="background:#fff;padding:22px;border:1px solid #f0e6df;border-top:none;border-radius:0 0 12px 12px;">
              <p>Querido(a) <strong>{self.participante.nome}</strong>,</p>
              <p>Com grande alegria comunicamos que voc√™ foi <strong>selecionado(a)</strong> para participar do evento!</p>
              <div style="background:#fff4e8;border-left:4px solid #f5a25f;padding:12px 14px;border-radius:8px;margin:16px 0;">
                <p style="margin:0;"><strong>Informa√ß√µes importantes</strong></p>
                <p style="margin:6px 0 0;">üóì {data_evento} ‚Ä¢ üìç {local_evento}</p>
              </div>
              <p style="margin:14px 0;">
                <a href="{self.portal_participante_url}" style="background:#7a3e1d;color:#fff;padding:10px 16px;border-radius:8px;text-decoration:none;display:inline-block;">Confirmar presen√ßa / Ver Portal</a>
              </p>
              <hr style="border:none;border-top:1px solid #f2e9e2;margin:18px 0;">
              <p style="font-size:13px;opacity:.85;">
                ‚ÄúVinde a mim, v√≥s todos que estais cansados‚Ä¶‚Äù (Mt 11,28).<br>
                <strong>{nome_app}</strong>
              </p>
            </div>
          </div>
        </body></html>
        """

        msg = EmailMultiAlternatives(assunto, texto, settings.DEFAULT_FROM_EMAIL, [self.participante.email])
        msg.attach_alternative(html, "text/html")
        try:
            msg.send()
        except Exception:
            pass

    # ---------------- Disparos autom√°ticos ----------------
    def save(self, *args, **kwargs):
        is_new = self.pk is None

        # üîí refor√ßa as valida√ß√µes (inclui regra dos Servos)
        self.full_clean()

        enviar_selecao   = False
        enviar_pagto_ok  = False
        enviar_recebida  = False
        mudou_pagto      = False  # detecta mudan√ßa no pagamento

        if self.pk:
            antigo = Inscricao.objects.get(pk=self.pk)

            if not antigo.foi_selecionado and self.foi_selecionado:
                enviar_selecao = True

            mudou_pagto = (antigo.pagamento_confirmado != self.pagamento_confirmado)

            if not antigo.pagamento_confirmado and self.pagamento_confirmado:
                enviar_pagto_ok = True
                self.inscricao_concluida = True  # conclui ao confirmar pagamento
            elif antigo.pagamento_confirmado and not self.pagamento_confirmado:
                # se desfez o pagamento, desfaz conclus√£o
                self.inscricao_concluida = False

            if not antigo.inscricao_enviada and self.inscricao_enviada:
                enviar_recebida = True

        super().save(*args, **kwargs)

        # Ao criar, garante base correta + tenta parear se j√° houver cpf_conjuge
        if is_new:
            try:
                self.ensure_base_instance()
            except Exception:
                pass
            try:
                if self.cpf_conjuge:
                    self.tentar_vincular_conjuge()
            except Exception:
                pass

        # Se acabou de ser selecionada e √© 'casais', seleciona o par tamb√©m
        if enviar_selecao and (self.evento.tipo or '').lower() == 'casais':
            par = self.par
            if par and not par.foi_selecionado:
                par.foi_selecionado = True
                par.save()  # dispara notifica√ß√µes do par tamb√©m

        # Propaga pagamento ao c√¥njuge se mudou (pago/desfeito) e for CASAIS
        try:
            if (self.evento.tipo or '').lower() == 'casais' and mudou_pagto:
                self._propagar_pagamento_para_par(self.pagamento_confirmado)
        except Exception:
            pass

        # Disparos de e-mail (somente e-mail ‚Äî WhatsApp removido)
        if enviar_selecao:
            self.enviar_email_selecao()

        if enviar_pagto_ok:
            self.enviar_email_pagamento_confirmado()

        if enviar_recebida:
            self.enviar_email_recebida()


@receiver(post_save, sender=Inscricao)
def _parear_apos_criar(sender, instance: 'Inscricao', created, **kwargs):
    # 1) tentar com o cpf_conjuge desta inscri√ß√£o
    try:
        if instance.cpf_conjuge and instance.par is None:
            instance.tentar_vincular_conjuge()
    except Exception:
        pass

    # 2) caminho inverso: achar inscri√ß√µes do mesmo evento que anotaram este CPF como 'cpf_conjuge'
    try:
        meu_cpf_d = re.sub(r'\D', '', getattr(instance.participante, 'cpf', '') or '')
        if len(meu_cpf_d) != 11 or instance.par is not None:
            return
        candidatos = Inscricao.objects.filter(
            evento=instance.evento,
            inscricao_pareada__isnull=True
        ).exclude(pk=instance.pk)
        for c in candidatos:
            alvo_d = re.sub(r'\D', '', c.cpf_conjuge or '')
            if alvo_d == meu_cpf_d:
                c.set_pareada(instance)   # j√° propaga sele√ß√£o se for casais
                break
    except Exception:
        pass


class Filho(models.Model):
    inscricao = models.ForeignKey(
        'Inscricao',
        on_delete=models.CASCADE,
        related_name='filhos'
    )
    nome = models.CharField(max_length=255, verbose_name="Nome do Filho")
    idade = models.PositiveIntegerField(verbose_name="Idade")
    telefone = models.CharField(max_length=20, blank=True, null=True, verbose_name="Telefone")
    endereco = models.CharField(max_length=255, blank=True, null=True, verbose_name="Endere√ßo")

    def __str__(self):
        return f"{self.nome} ({self.idade} anos)"


# ---------------------------------------------------------------------
# Pagamento
# ---------------------------------------------------------------------
class Pagamento(models.Model):
    class MetodoPagamento(models.TextChoices):
        PIX = 'pix', _('Pix')
        CREDITO = 'credito', _('Cart√£o de Cr√©dito')
        DEBITO = 'debito', _('Cart√£o de D√©bito')
        DINHEIRO = 'dinheiro', _('Dinheiro')

    class StatusPagamento(models.TextChoices):
        PENDENTE = 'pendente', _('Pendente')
        CONFIRMADO = 'confirmado', _('Confirmado')
        CANCELADO = 'cancelado', _('Cancelado')

    inscricao = models.OneToOneField(Inscricao, on_delete=models.CASCADE)
    metodo = models.CharField(max_length=20, choices=MetodoPagamento.choices, default=MetodoPagamento.PIX)
    valor = models.DecimalField(max_digits=8, decimal_places=2)

    # taxas e l√≠quido (j√° existentes/ajustados)
    fee_mp = models.DecimalField(max_digits=10, decimal_places=2, default=Decimal("0.00"))
    net_received = models.DecimalField(max_digits=10, decimal_places=2, default=Decimal("0.00"))

    status = models.CharField(max_length=20, choices=StatusPagamento.choices, default=StatusPagamento.PENDENTE)
    data_pagamento = models.DateTimeField(null=True, blank=True)
    transacao_id = models.CharField(max_length=100, blank=True)

    comprovante = models.FileField(
        upload_to='comprovantes_pagamento/',
        null=True,
        blank=True,
        verbose_name='Comprovante de Pagamento'
    )

    def __str__(self):
        return f"Pagamento de {self.inscricao}"


# üîî NOVO: sincroniza Pagamento ‚Üí Inscricao e propaga para o c√¥njuge (casais)
@receiver(post_save, sender=Pagamento)
def _sincronizar_pagamento_inscricao(sender, instance: 'Pagamento', created, **kwargs):
    """
    Ao salvar Pagamento, reflete na Inscricao.pagamento_confirmado e dispara
    a l√≥gica de propaga√ß√£o para o c√¥njuge (via save() da Inscricao).
    """
    try:
        ins = instance.inscricao
    except Exception:
        return

    status = (instance.status or '').lower()
    deve_marcar = (status == 'confirmado')

    # evita salvar se j√° est√° coerente
    if bool(ins.pagamento_confirmado) == deve_marcar and bool(ins.inscricao_concluida) == deve_marcar:
        return

    ins.pagamento_confirmado = deve_marcar
    ins.inscricao_concluida = deve_marcar
    try:
        ins.save()  # save() cuidar√° de propagar ao c√¥njuge quando for "casais"
    except Exception:
        pass


# ---------------------------------------------------------------------
# Bases de inscri√ß√£o por tipo
# ---------------------------------------------------------------------
class BaseInscricao(models.Model):
    """Campos comuns √†s Inscri√ß√µes (S√™nior, Juvenil, Mirim, Servos, Casais, Evento, Retiro)."""
    inscricao = models.OneToOneField('Inscricao', on_delete=models.CASCADE, verbose_name="Inscri√ß√£o")
    data_nascimento = models.DateField(verbose_name="Data de Nascimento")
    altura = models.FloatField(blank=True, null=True, verbose_name="Altura (m)")
    peso = models.FloatField(blank=True, null=True, verbose_name="Peso (kg)")

    SIM_NAO_CHOICES = [('sim', 'Sim'), ('nao', 'N√£o')]

    batizado = models.CharField(max_length=3, choices=SIM_NAO_CHOICES, blank=True, null=True, verbose_name="√â batizado?")

    ESTADO_CIVIL_CHOICES = [
        ('solteiro', 'Solteiro(a)'),
        ('casado', 'Casado(a)'),
        ('divorciado', 'Divorciado(a)'),
        ('viuvo', 'Vi√∫vo(a)'),
        ('uniao_estavel', 'Uni√£o Est√°vel'),
    ]
    estado_civil = models.CharField(max_length=20, choices=ESTADO_CIVIL_CHOICES, blank=True, null=True, verbose_name="Estado Civil")

    casado_na_igreja = models.CharField(max_length=3, choices=SIM_NAO_CHOICES, blank=True, null=True, verbose_name="Casado na Igreja?")

    tempo_casado_uniao = models.CharField(
        max_length=50,
        blank=True,
        null=True,
        verbose_name="H√° quanto tempo s√£o casados/est√£o em uni√£o est√°vel?"
    )

    nome_conjuge = models.CharField(max_length=200, blank=True, null=True, verbose_name="Nome do C√¥njuge")
    conjuge_inscrito = models.CharField(max_length=3, choices=SIM_NAO_CHOICES, blank=True, null=True, verbose_name="C√¥njuge Inscrito?")

    paroquia = models.ForeignKey('Paroquia', on_delete=models.SET_NULL, null=True, blank=True, verbose_name="Par√≥quia")

    pastoral_movimento = models.ForeignKey('PastoralMovimento', on_delete=models.SET_NULL, null=True, blank=True, verbose_name="Pastoral/Movimento")
    outra_pastoral_movimento = models.CharField(max_length=200, blank=True, null=True, verbose_name="Outra Pastoral/Movimento")

    dizimista = models.CharField(max_length=3, choices=SIM_NAO_CHOICES, blank=True, null=True, verbose_name="Dizimista?")
    crismado = models.CharField(max_length=3, choices=SIM_NAO_CHOICES, blank=True, null=True, verbose_name="Crismado?")

    TAMANHO_CAMISA_CHOICES = [('PP', 'PP'), ('P', 'P'), ('M', 'M'), ('G', 'G'), ('GG', 'GG'), ('XG', 'XG'), ('XGG', 'XGG')]
    tamanho_camisa = models.CharField(max_length=5, choices=TAMANHO_CAMISA_CHOICES, blank=True, null=True, verbose_name="Tamanho da Camisa")

    # ----------------- SA√öDE -----------------
    problema_saude = models.CharField(max_length=3, choices=SIM_NAO_CHOICES, blank=True, null=True, verbose_name="Possui algum problema de sa√∫de?")
    qual_problema_saude = models.CharField(max_length=255, blank=True, null=True, verbose_name="Qual problema de sa√∫de?")

    medicamento_controlado = models.CharField(max_length=3, choices=SIM_NAO_CHOICES, blank=True, null=True, verbose_name="Usa algum medicamento controlado?")
    qual_medicamento_controlado = models.CharField(max_length=255, blank=True, null=True, verbose_name="Qual medicamento controlado?")
    protocolo_administracao = models.CharField(max_length=255, blank=True, null=True, verbose_name="Protocolo de administra√ß√£o")

    mobilidade_reduzida = models.CharField(max_length=3, choices=SIM_NAO_CHOICES, blank=True, null=True, verbose_name="Possui limita√ß√µes f√≠sicas ou mobilidade reduzida?")
    qual_mobilidade_reduzida = models.CharField(max_length=255, blank=True, null=True, verbose_name="Qual limita√ß√£o/mobilidade reduzida?")

    # Alergias
    alergia_alimento = models.CharField(max_length=3, choices=SIM_NAO_CHOICES, blank=True, null=True, verbose_name="Possui alergia a algum alimento?")
    qual_alergia_alimento = models.CharField(max_length=255, blank=True, null=True, verbose_name="Qual alimento causa alergia?")
    alergia_medicamento = models.CharField(max_length=3, choices=SIM_NAO_CHOICES, blank=True, null=True, verbose_name="Possui alergia a algum medicamento?")
    qual_alergia_medicamento = models.CharField(max_length=255, blank=True, null=True, verbose_name="Qual medicamento causa alergia?")

    # NOVOS CAMPOS ESPEC√çFICOS
    diabetes = models.CharField(max_length=3, choices=SIM_NAO_CHOICES, blank=True, null=True, verbose_name="Possui Diabetes?")
    pressao_alta = models.CharField(max_length=3, choices=SIM_NAO_CHOICES, blank=True, null=True, verbose_name="Possui Press√£o Alta?")

    TIPO_SANGUINEO_CHOICES = [
        ('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'),
        ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-'), ('NS', 'N√£o sei')
    ]
    tipo_sanguineo = models.CharField(max_length=3, choices=TIPO_SANGUINEO_CHOICES, blank=True, null=True, verbose_name="Tipo Sangu√≠neo")

    indicado_por = models.CharField(max_length=200, blank=True, null=True, verbose_name="Indicado Por")
    informacoes_extras = models.TextField(blank=True, null=True, verbose_name="Informa√ß√µes extras")

    class Meta:
        abstract = True


class InscricaoSenior(BaseInscricao):
    def __str__(self):
        return f"Inscri√ß√£o Senior de {self.inscricao.participante.nome}"


class InscricaoJuvenil(BaseInscricao):
    def __str__(self):
        return f"Inscri√ß√£o Juvenil de {self.inscricao.participante.nome}"


class InscricaoMirim(BaseInscricao):
    def __str__(self):
        return f"Inscri√ß√£o Mirim de {self.inscricao.participante.nome}"


class InscricaoServos(BaseInscricao):
    def __str__(self):
        return f"Inscri√ß√£o Servos de {self.inscricao.participante.nome}"


# ‚Äî‚Äî‚Äî NOVOS TIPOS ‚Äî‚Äî‚Äî
class InscricaoCasais(BaseInscricao):
    """
    Inscri√ß√£o espec√≠fica para eventos de casais.
    Herda todos os campos de BaseInscricao e adiciona informa√ß√µes extras.
    """
    foto_casal = models.ImageField(
        upload_to="casais/fotos/",
        null=True,
        blank=True,
        verbose_name="Foto do casal"
    )
    tempo_casado_uniao = models.CharField(
        max_length=100,
        null=True,
        blank=True,
        verbose_name="Tempo de uni√£o"
    )
    casado_na_igreja = models.CharField(
        max_length=10,
        choices=[("sim", "Sim"), ("nao", "N√£o")],
        null=True,
        blank=True,
        verbose_name="Casado no religioso?"
    )

    def __str__(self):
        return f"Inscri√ß√£o Casais de {self.inscricao.participante.nome}"


class InscricaoEvento(BaseInscricao):
    def __str__(self):
        return f"Inscri√ß√£o Evento de {self.inscricao.participante.nome}"


class InscricaoRetiro(BaseInscricao):
    def __str__(self):
        return f"Inscri√ß√£o Retiro de {self.inscricao.participante.nome}"


class Contato(models.Model):
    ESCOLHAS_GRAU_PARENTESCO = [
        ('mae', 'M√£e'),
        ('pai', 'Pai'),
        ('irmao', 'Irm√£o'),
        ('tio', 'Tio'),
        ('tia', 'Tia'),
        ('outro', 'Outro'),
    ]

    inscricao = models.ForeignKey(Inscricao, on_delete=models.CASCADE, related_name='contatos')
    nome = models.CharField(max_length=200)
    telefone = models.CharField(max_length=20)
    grau_parentesco = models.CharField(max_length=20, choices=ESCOLHAS_GRAU_PARENTESCO)
    ja_e_campista = models.BooleanField(default=False)

    def __str__(self):
        return f"Contato de {self.inscricao.participante.nome}: {self.nome}"


# ---------------------------------------------------------------------
# Usu√°rio
# ---------------------------------------------------------------------
TIPOS_USUARIO = [
    ('admin_geral', 'Administrador Geral'),
    ('admin_paroquia', 'Administrador da Par√≥quia'),
]

class User(AbstractUser):
    tipo_usuario = models.CharField(max_length=20, choices=TIPOS_USUARIO)
    paroquia = models.ForeignKey('Paroquia', null=True, blank=True, on_delete=models.SET_NULL)

    groups = models.ManyToManyField(
        Group,
        related_name='custom_user_set',
        blank=True,
        help_text='The groups this user belongs to.',
        verbose_name='groups',
        related_query_name='custom_user',
    )

    user_permissions = models.ManyToManyField(
        Permission,
        related_name='custom_user_set',
        blank=True,
        help_text='Specific permissions for this user.',
        verbose_name='user permissions',
        related_query_name='custom_user',
    )

    def is_admin_geral(self):
        return self.tipo_usuario == 'admin_geral'

    def is_admin_paroquia(self):
        return self.tipo_usuario == 'admin_paroquia'


# ---------------------------------------------------------------------
# Pol√≠tica de Privacidade
# ---------------------------------------------------------------------
class PoliticaPrivacidade(models.Model):
    texto = models.TextField("Texto da Pol√≠tica de Privacidade")
    logo = CloudinaryField(verbose_name="Logo", null=True, blank=True)
    imagem_camisa = CloudinaryField(verbose_name="Imagem da Camisa", null=True, blank=True)
    imagem_1 = CloudinaryField(verbose_name="Imagem 1 (opcional)", null=True, blank=True)
    imagem_2 = CloudinaryField(verbose_name="Imagem 2 (opcional)", null=True, blank=True)

    # NOVO
    imagem_ajuda = CloudinaryField(
        verbose_name="Imagem da Ajuda (bot√£o flutuante)",
        null=True, blank=True
    )

    # Dados do dono do sistema...
    cpf_cnpj = models.CharField("CPF/CNPJ", max_length=18, blank=True, null=True)
    email_contato = models.EmailField("E-mail de Contato", blank=True, null=True)
    telefone_contato = models.CharField(
        "Telefone de Contato (E.164 BR)",
        max_length=20, blank=True, null=True,
        help_text="Use +55DDDN√öMERO (ex.: +5563920013103)",
        validators=[RegexValidator(
            regex=r'^\+55\d{10,11}$',
            message="Formato inv√°lido. Use +55 seguido de 10 ou 11 d√≠gitos (ex.: +5563920013103).",
        )],
    )
    endereco = models.CharField("Endere√ßo", max_length=255, blank=True, null=True)
    numero = models.CharField("N√∫mero", max_length=10, blank=True, null=True)
    bairro = models.CharField("Bairro", max_length=100, blank=True, null=True)
    estado = models.CharField("Estado", max_length=2, blank=True, null=True)

    def __str__(self):
        return "Pol√≠tica de Privacidade"


# ---------------------------------------------------------------------
# V√≠deo do Evento (Cloudinary)
# ---------------------------------------------------------------------
class VideoEventoAcampamento(models.Model):
    evento = models.OneToOneField('EventoAcampamento', on_delete=models.CASCADE, related_name='video')
    titulo = models.CharField(max_length=255)
    arquivo = CloudinaryField(resource_type='video', verbose_name="V√≠deo do Evento", null=True, blank=True)

    def __str__(self):
        return f"V√≠deo de {self.evento.nome}"

    def get_url(self):
        try:
            return self.arquivo.url
        except Exception:
            return ""


# ---------------------------------------------------------------------
# C√¥njuge
# ---------------------------------------------------------------------
class Conjuge(models.Model):
    SIM_NAO_CHOICES = [('sim', 'Sim'), ('nao', 'N√£o')]

    inscricao = models.OneToOneField(
        Inscricao, 
        on_delete=models.CASCADE, 
        related_name='conjuge'
    )
    nome = models.CharField(
        max_length=200, 
        blank=True, 
        null=True, 
        verbose_name="Nome do C√¥njuge"
    )
    conjuge_inscrito = models.CharField(
        max_length=3, 
        choices=SIM_NAO_CHOICES, 
        default='nao', 
        verbose_name="C√¥njuge Inscrito?"
    )
    ja_e_campista = models.CharField(
        max_length=3, 
        choices=SIM_NAO_CHOICES, 
        default='nao', 
        verbose_name="J√° √© Campista?"
    )
    acampamento = models.CharField(
        max_length=200,
        blank=True,
        null=True,
        verbose_name="De qual acampamento?"
    )

    def __str__(self):
        nome = self.nome or '‚Äî'
        return f"C√¥njuge de {self.inscricao.participante.nome}: {nome}"


# ---------------------------------------------------------------------
# Template de Crach√°
# ---------------------------------------------------------------------
class CrachaTemplate(models.Model):
    nome = models.CharField("Nome do Template", max_length=100)
    imagem_fundo = CloudinaryField(verbose_name="Imagem de Fundo", null=True, blank=True)

    def __str__(self):
        return self.nome


# ---------------------------------------------------------------------
# Mercado Pago Config
# ---------------------------------------------------------------------
class MercadoPagoConfig(models.Model):
    paroquia = models.OneToOneField(Paroquia, on_delete=models.CASCADE, related_name="mp_config")
    access_token = models.CharField("Access Token", max_length=255, help_text="Token de acesso gerado no painel do Mercado Pago")
    public_key = models.CharField("Public Key", max_length=255, help_text="Public Key do Mercado Pago")
    sandbox_mode = models.BooleanField("Sandbox", default=True, help_text="Use modo sandbox para testes")

    def __str__(self):
        return f"MP Config para {self.paroquia.nome}"


# ---------------------------------------------------------------------
# Prefer√™ncias de Comunica√ß√£o
# ---------------------------------------------------------------------
class PreferenciasComunicacao(models.Model):
    FONTE_CHOICES = [
        ('form', 'Formul√°rio/Portal'),
        ('admin', 'Admin'),
        ('import', 'Importa√ß√£o'),
    ]

    participante = models.OneToOneField('Participante', on_delete=models.CASCADE, related_name='prefs')
    whatsapp_marketing_opt_in = models.BooleanField(default=False, verbose_name="Aceita marketing no WhatsApp")
    whatsapp_optin_data = models.DateTimeField(null=True, blank=True)
    whatsapp_optin_fonte = models.CharField(max_length=20, choices=FONTE_CHOICES, default='admin')
    whatsapp_optin_prova = models.TextField(blank=True, null=True, help_text="Como foi coletado (ex.: checkbox, IP, data/hora)")
    politica_versao = models.CharField(max_length=20, blank=True, null=True)

    def __str__(self):
        return f"Prefer√™ncias de {self.participante.nome}"

    def marcar_optin_marketing(self, fonte='admin', prova=None, versao=None):
        self.whatsapp_marketing_opt_in = True
        self.whatsapp_optin_data = timezone.now()
        self.whatsapp_optin_fonte = fonte
        if prova:
            self.whatsapp_optin_prova = prova
        if versao:
            self.politica_versao = versao
        self.save()


@receiver(post_save, sender=Participante)
def criar_prefs(sender, instance, created, **kwargs):
    if created:
        PreferenciasComunicacao.objects.create(participante=instance)


# ---------------------------------------------------------------------
# Pol√≠tica de Reembolso
# ---------------------------------------------------------------------
class PoliticaReembolso(models.Model):
    evento = models.OneToOneField(
        EventoAcampamento,
        on_delete=models.CASCADE,
        related_name='politica_reembolso',
        help_text="Cada evento pode ter (no m√°ximo) uma pol√≠tica de reembolso."
    )
    ativo = models.BooleanField(default=True)
    permite_reembolso = models.BooleanField(
        default=True,
        help_text="Se desmarcado, o evento n√£o aceitar√° solicita√ß√µes de reembolso."
    )

    prazo_solicitacao_dias = models.PositiveIntegerField(
        default=7,
        help_text="Dias ANTES do in√≠cio do evento para solicitar reembolso."
    )
    taxa_administrativa_percent = models.DecimalField(
        max_digits=5, decimal_places=2, default=Decimal('0.00'),
        validators=[MinValueValidator(Decimal('0.00')), MaxValueValidator(Decimal('100.00'))],
        help_text="Percentual descontado no reembolso (0 a 100)."
    )

    descricao = models.TextField(
        blank=True,
        help_text="Detalhe as regras (ex.: Integral at√© 7 dias antes; ap√≥s isso, 70%)."
    )

    contato_email = models.EmailField(blank=True, null=True)
    contato_whatsapp = models.CharField(
        max_length=20, blank=True, null=True,
        help_text="WhatsApp em E.164 (ex.: +5563920013103).",
        validators=[RegexValidator(regex=r'^\+55\d{10,11}$',
                                   message="Use +55 seguido de 10 ou 11 d√≠gitos.")]
    )

    data_criacao = models.DateTimeField(auto_now_add=True)
    data_atualizacao = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "Pol√≠tica de Reembolso"
        verbose_name_plural = "Pol√≠ticas de Reembolso"

    def __str__(self):
        return f"Pol√≠tica de Reembolso ‚Äì {self.evento.nome}"

    def clean(self):
        super().clean()
        if self.contato_whatsapp:
            norm = normalizar_e164_br(self.contato_whatsapp)
            if not norm or not validar_e164_br(norm):
                raise ValidationError({'contato_whatsapp': "Informe um telefone BR v√°lido. Ex.: +5563920013103"})
            self.contato_whatsapp = norm

    def save(self, *args, **kwargs):
        if self.contato_whatsapp:
            norm = normalizar_e164_br(self.contato_whatsapp)
            if norm:
                self.contato_whatsapp = norm
        super().save(*args, **kwargs)


class MercadoPagoOwnerConfig(models.Model):
    """
    Credenciais do Mercado Pago do DONO do sistema.
    Usado EXCLUSIVAMENTE para gerar PIX de repasse.
    """
    nome_exibicao = models.CharField(max_length=100, default="Admin do Sistema")
    access_token = models.CharField(max_length=255)  # PROD access token do dono
    notificacao_webhook_url = models.URLField(blank=True, null=True, help_text="Opcional: URL p√∫blica do webhook de repasses")
    email_cobranca = models.EmailField(blank=True, null=True, help_text="E-mail que aparecer√° como pagador padr√£o")
    ativo = models.BooleanField(default=True)

    class Meta:
        verbose_name = "Configura√ß√£o MP (Dono)"
        verbose_name_plural = "Configura√ß√µes MP (Dono)"

    def __str__(self):
        return f"MP Dono ({'ativo' if self.ativo else 'inativo'})"


class Repasse(models.Model):
    class Status(models.TextChoices):
        PENDENTE = "pendente", "Pendente"
        PAGO = "pago", "Pago"
        CANCELADO = "cancelado", "Cancelado"

    paroquia = models.ForeignKey("inscricoes.Paroquia", on_delete=models.CASCADE, related_name="repasses")
    evento = models.ForeignKey("inscricoes.EventoAcampamento", on_delete=models.CASCADE, related_name="repasses")
    # base = arrecadado confirmado - taxas MP (dos pagamentos das inscri√ß√µes)
    valor_base = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal("0.00"))
    taxa_percentual = models.DecimalField(max_digits=5, decimal_places=2, default=Decimal("2.00"))
    valor_repasse = models.DecimalField(max_digits=12, decimal_places=2, default=Decimal("0.00"))

    status = models.CharField(max_length=20, choices=Status.choices, default=Status.PENDENTE)

    # dados do PIX gerado na conta do DONO
    transacao_id = models.CharField(max_length=64, blank=True, null=True)
    qr_code_text = models.TextField(blank=True, null=True)     # copia-e-cola
    qr_code_base64 = models.TextField(blank=True, null=True)   # <img src="data:image/png;base64,...">
    criado_em = models.DateTimeField(auto_now_add=True)
    atualizado_em = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ["-criado_em"]
        constraints = [
            models.UniqueConstraint(fields=["paroquia", "evento", "status"], condition=models.Q(status="pendente"), name="uniq_repasse_pendente_por_evento")
        ]

    def __str__(self):
        return f"Repasse {self.paroquia} / {self.evento} ‚Äî {self.valor_repasse} ({self.status})"


# ---------------------------------------------------------------------
# M√≠dias do Site (landing / institucional)
# ---------------------------------------------------------------------
class SiteImage(models.Model):
    """
    Reposit√≥rio central de imagens usadas no site (landing, p√°ginas institucionais).
    Use 'key' para referenciar nas templates.
    """
    CATEGORIA_CHOICES = [
        ("hero", "Hero / Capa"),
        ("screenshot", "Screenshot"),
        ("logo", "Logo/Marca"),
        ("ilustracao", "Ilustra√ß√£o"),
        ("icone", "√çcone"),
        ("banner", "Banner"),
        ("outro", "Outro"),
    ]

    key = models.SlugField("Chave √∫nica", max_length=80, unique=True,
                           help_text="Ex.: dashboard, pagamentos, questionario-pronto")
    titulo = models.CharField("T√≠tulo", max_length=120, blank=True)
    categoria = models.CharField("Categoria", max_length=20, choices=CATEGORIA_CHOICES, default="screenshot")
    imagem = CloudinaryField(verbose_name="Imagem", null=True, blank=True)
    alt_text = models.CharField("Texto alternativo (acessibilidade)", max_length=200, blank=True)
    legenda = models.CharField("Legenda (opcional)", max_length=200, blank=True)
    creditos = models.CharField("Cr√©ditos (opcional)", max_length=200, blank=True)
    ativa = models.BooleanField("Ativa?", default=True)
    largura = models.PositiveIntegerField("Largura (px)", null=True, blank=True)
    altura = models.PositiveIntegerField("Altura (px)", null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "Imagem do Site"
        verbose_name_plural = "Imagens do Site"
        ordering = ["key"]

    def __str__(self):
        return self.key or self.titulo or f"SiteImage #{self.pk}"


# ---------------------------------------------------------------------
# Leads da Landing (Entre em contato)
# ---------------------------------------------------------------------
class LeadLanding(models.Model):
    """
    Leads do formul√°rio 'Entre em contato' (landing).
    """
    nome = models.CharField(max_length=120)
    email = models.EmailField(db_index=True)
    whatsapp = models.CharField(
        max_length=20,
        help_text="WhatsApp em E.164 BR: +55DDDN√öMERO (ex.: +5563920013103)",
        validators=[RegexValidator(
            regex=r'^\+55\d{10,11}$',
            message="Use +55 seguido de 10 ou 11 d√≠gitos (ex.: +5563920013103).",
        )],
    )
    mensagem = models.TextField(blank=True)

    # ATEN√á√ÉO: mantenha o MESMO nome usado no form/template (use 'consent_lgpd').
    consent_lgpd = models.BooleanField(default=False)

    origem = models.CharField(max_length=120, default="landing")

    # Auditoria (√∫teis p/ analytics b√°sicos)
    ip = models.GenericIPAddressField(null=True, blank=True)
    user_agent = models.TextField(blank=True)

    created_at = models.DateTimeField(auto_now_add=True, db_index=True)

    class Meta:
        ordering = ["-created_at"]
        indexes = [
            models.Index(fields=["created_at"]),
            models.Index(fields=["email"]),
            models.Index(fields=["origem"]),
        ]

    def __str__(self):
        return f"{self.nome} <{self.email}>"

    @property
    def whatsapp_mascarado(self) -> str:
        """Exibe os 2 √∫ltimos d√≠gitos apenas."""
        if not self.whatsapp:
            return ""
        return self.whatsapp[:-2] + "‚Ä¢‚Ä¢"

    def clean(self):
        super().clean()
        # Normaliza/valida WhatsApp digitado no site (pode vir sem E.164)
        if self.whatsapp:
            norm = normalizar_e164_br(self.whatsapp)
            if not norm or not validar_e164_br(norm):
                raise ValidationError({'whatsapp': "Informe um telefone BR v√°lido. Ex.: +5563920013103"})
            self.whatsapp = norm


@receiver(post_save, sender=LeadLanding)
def _leadlanding_enviar_emails(sender, instance: 'LeadLanding', created, **kwargs):
    if not created:
        return

    # E-mail para a pessoa
    assunto_user = "Recebemos sua mensagem ‚Äî eismeaqui.app"
    texto_user = (
        f"Ol√° {instance.nome},\n\n"
        "Recebemos sua mensagem no eismeaqui.app. Em breve retornaremos via e-mail ou WhatsApp.\n\n"
        "Deus aben√ßoe!\nEquipe eismeaqui.app"
    )
    html_user = f"""
    <html><body style="font-family:Arial,sans-serif;color:#0f172a">
      <p>Ol√° <strong>{instance.nome}</strong>,</p>
      <p>Recebemos sua mensagem no <strong>eismeaqui.app</strong>. Em breve retornaremos via e-mail ou WhatsApp.</p>
      <p>Deus aben√ßoe!<br/>Equipe eismeaqui.app</p>
    </body></html>
    """
    try:
        m1 = EmailMultiAlternatives(assunto_user, texto_user, settings.DEFAULT_FROM_EMAIL, [instance.email])
        m1.attach_alternative(html_user, "text/html")
        m1.send(fail_silently=True)
    except Exception:
        pass

    # E-mail interno (para voc√™/equipe)
    destino_admin = getattr(settings, "SALES_INBOX", settings.DEFAULT_FROM_EMAIL)
    assunto_admin = f"[Landing] Novo contato: {instance.nome}"
    html_admin = f"""
    <html><body style="font-family:Arial,sans-serif;color:#0f172a">
      <h3>Novo contato recebido</h3>
      <p><strong>Nome:</strong> {instance.nome}</p>
      <p><strong>E-mail:</strong> {instance.email}</p>
      <p><strong>WhatsApp:</strong> {instance.whatsapp}</p>
      <p><strong>Mensagem:</strong><br/>{instance.mensagem or '‚Äî'}</p>
      <p><small>Origem: {instance.origem} ‚Ä¢ Data: {timezone.localtime(instance.created_at).strftime('%d/%m/%Y %H:%M')}</small></p>
    </body></html>
    """
    try:
        m2 = EmailMultiAlternatives(assunto_admin, html_admin, settings.DEFAULT_FROM_EMAIL, [destino_admin])
        m2.attach_alternative(html_admin, "text/html")
        m2.send(fail_silently=True)
    except Exception:
        pass


class SiteVisit(models.Model):
    path = models.CharField(max_length=255)
    ip = models.GenericIPAddressField(null=True, blank=True)
    user_agent = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ["-created_at"]
        indexes = [
            models.Index(fields=["created_at"]),
            models.Index(fields=["path"]),
        ]

    def __str__(self):
        return f"{self.ip} {self.path} @ {self.created_at:%Y-%m-%d %H:%M}"


class Comunicado(models.Model):
    paroquia = models.ForeignKey("inscricoes.Paroquia", on_delete=models.CASCADE, related_name="comunicados")
    titulo = models.CharField(max_length=180)
    texto = models.TextField()
    data_publicacao = models.DateField(default=timezone.localdate)
    publicado = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    capa = models.ImageField(upload_to='comunicados/capas/', blank=True, null=True)

    class Meta:
        ordering = ["-data_publicacao", "-created_at"]

    def __str__(self):
        return f"{self.paroquia.nome} ‚Ä¢ {self.titulo}"


class EventoComunitario(models.Model):
    paroquia = models.ForeignKey("inscricoes.Paroquia", on_delete=models.CASCADE, related_name="eventos_comunidade")
    nome = models.CharField(max_length=200)
    slug = models.SlugField(max_length=200, blank=True)  # √∫nico dentro da par√≥quia
    data_inicio = models.DateField()
    data_fim = models.DateField(null=True, blank=True)
    visivel_site = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ["data_inicio", "nome"]
        constraints = [
            models.UniqueConstraint(fields=["paroquia", "slug"], name="unique_evento_comunitario_por_paroquia")
        ]

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.nome)[:200]
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.paroquia.nome} ‚Ä¢ {self.nome}"


# ---------------------------------------------------------------------
# Grupos e Minist√©rios (Servos)
# ---------------------------------------------------------------------
class Grupo(models.Model):
    evento = models.ForeignKey("EventoAcampamento", on_delete=models.CASCADE, related_name="grupos")
    nome = models.CharField(max_length=100)
    cor = models.CharField(max_length=20, blank=True, null=True,
                           help_text="Ex.: Amarelo, Vermelho, Azul...")

    class Meta:
        constraints = [
            models.UniqueConstraint(fields=["evento", "nome"], name="uniq_grupo_nome_por_evento"),
        ]

    def clean(self):
        super().clean()
        if not self.nome:
            raise ValidationError({"nome": "Informe o nome do grupo."})

    def __str__(self):
        return f"{self.nome} ({self.evento.nome})"


class Ministerio(models.Model):
    evento = models.ForeignKey("EventoAcampamento", on_delete=models.CASCADE, related_name="ministerios")
    nome = models.CharField(max_length=100)
    descricao = models.TextField(blank=True, null=True)

    class Meta:
        constraints = [
            models.UniqueConstraint(fields=["evento", "nome"], name="uniq_ministerio_nome_por_evento"),
        ]

    def clean(self):
        super().clean()
        if (self.evento.tipo or "").lower() != "servos":
            raise ValidationError({"evento": "Minist√©rios s√≥ podem ser cadastrados em eventos do tipo Servos."})

    def __str__(self):
        return f"{self.nome} ({self.evento.nome})"


class AlocacaoMinisterio(models.Model):
    inscricao = models.OneToOneField("Inscricao", on_delete=models.CASCADE, related_name="alocacao_ministerio")
    ministerio = models.ForeignKey("Ministerio", on_delete=models.SET_NULL, null=True, blank=True, related_name="inscricoes")
    funcao = models.CharField(max_length=100, blank=True, null=True, help_text="Ex.: Coordena√ß√£o, Liturgia, M√∫sica...")
    data_alocacao = models.DateTimeField(auto_now_add=True)

    def clean(self):
        super().clean()
        if self.ministerio and (self.inscricao.evento_id != self.ministerio.evento_id):
            raise ValidationError({"ministerio": "Minist√©rio deve pertencer ao mesmo evento da inscri√ß√£o."})
        # s√≥ permitir minist√©rio se o evento da inscri√ß√£o for Servos
        if (self.inscricao.evento.tipo or "").lower() != "servos":
            raise ValidationError({"inscricao": "Atribui√ß√£o de minist√©rio s√≥ √© permitida para eventos de Servos."})

    def __str__(self):
        return f"{self.inscricao.participante.nome} ‚Üí {self.ministerio.nome if self.ministerio else 'Sem minist√©rio'}"


class AlocacaoGrupo(models.Model):
    inscricao = models.OneToOneField("Inscricao", on_delete=models.CASCADE, related_name="alocacao_grupo")
    grupo = models.ForeignKey("Grupo", on_delete=models.SET_NULL, null=True, blank=True, related_name="inscricoes")
    data_alocacao = models.DateTimeField(auto_now_add=True)

    def clean(self):
        super().clean()
        if self.grupo and (self.inscricao.evento_id != self.grupo.evento_id):
            raise ValidationError({"grupo": "Grupo deve pertencer ao mesmo evento da inscri√ß√£o."})

    def __str__(self):
        return f"{self.inscricao.participante.nome} ‚Üí {self.grupo.nome if self.grupo else 'Sem grupo'}"
